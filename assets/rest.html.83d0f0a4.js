import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode } from "./app.eda87d9d.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>start <span class="token operator">=</span> func<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u521B\u5EFA\u4E00\u4E2A\u51FD\u6570\uFF0C\u8C03\u7528 func \u65F6\uFF0Cthis \u7ED1\u5B9A\u5230\u521B\u5EFA\u7684\u65B0\u51FD\u6570\uFF0C\u5E76\u4E14 start \u4E4B\u540E\u7684\u53C2\u6570\u4F5C\u4E3A\u6570\u7EC4\u4F20\u5165\u3002</p><p>Note: \u8FD9\u4E2A\u65B9\u6CD5\u57FA\u4E8E rest parameter\u3002</p><p><strong><em>\u6DFB\u52A0\u7248\u672C</em></strong></p><p>4.0.0</p><p><strong><em>\u53C2\u6570</em></strong></p><p>func (Function): \u8981\u5E94\u7528\u7684\u51FD\u6570\u3002 [start=func.length-1] (number): rest \u53C2\u6570\u7684\u5F00\u59CB\u4F4D\u7F6E\u3002</p><p><strong><em>\u8FD4\u56DE</em></strong></p><p>(Function): \u8FD4\u56DE\u65B0\u7684\u51FD\u6570\u3002</p><p><strong><em>\u4F8B\u5B50</em></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> say <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">what<span class="token punctuation">,</span> names</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    what <span class="token operator">+</span>\n    <span class="token string">&#39; &#39;</span> <span class="token operator">+</span>\n    _<span class="token punctuation">.</span><span class="token function">initial</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&#39;, &amp; &#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    _<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fred&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;barney&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pebbles&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;hello fred, barney, &amp; pebbles&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>\u6E90\u7801\u5B9E\u73B0</em></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">rest</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> start</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> func <span class="token operator">!=</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token constant">FUNC_ERROR_TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  start <span class="token operator">=</span> start <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> start <span class="token operator">:</span> <span class="token function">toInteger</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">baseRest</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> rest<span class="token punctuation">;</span>\n\n<span class="token comment">//</span>\n<span class="token keyword">function</span> <span class="token function">baseRest</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> start</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">setToString</span><span class="token punctuation">(</span><span class="token function">overRest</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> start<span class="token punctuation">,</span> identity<span class="token punctuation">)</span><span class="token punctuation">,</span> func <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> baseRest<span class="token punctuation">;</span>\n\n<span class="token comment">//</span>\n<span class="token keyword">function</span> <span class="token function">overRest</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> start<span class="token punctuation">,</span> transform</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  start <span class="token operator">=</span> <span class="token function">nativeMax</span><span class="token punctuation">(</span>start <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> func<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">,</span>\n      index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>\n      length <span class="token operator">=</span> <span class="token function">nativeMax</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">-</span> start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      array <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">[</span>start <span class="token operator">+</span> index<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> otherArgs <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      otherArgs<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    otherArgs<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">transform</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> otherArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> overRest<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>\u7B80\u5355\u6A21\u62DF\u5B9E\u73B0</em></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">rest</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> start</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> func <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token function">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Expected a function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      start <span class="token operator">=</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    start <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>start <span class="token operator">&gt;</span> values<span class="token punctuation">.</span>length <span class="token operator">?</span> values<span class="token punctuation">.</span>length <span class="token operator">:</span> start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> array <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 15);
const _hoisted_16 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_16);
}
var rest_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "rest.html.vue"]]);
export { rest_html as default };
