import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode } from "./app.eda87d9d.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>_.fill(array, value, [start=0], [end=array.length])\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u4F7F\u7528 value \u503C\u6765\u586B\u5145\uFF08\u66FF\u6362\uFF09 array\uFF0C\u4ECE start \u4F4D\u7F6E\u5F00\u59CB, \u5230 end \u4F4D\u7F6E\u7ED3\u675F\uFF08\u4F46\u4E0D\u5305\u542B end \u4F4D\u7F6E\uFF09\u3002</p><p>Note: \u8FD9\u4E2A\u65B9\u6CD5\u4F1A\u6539\u53D8 array\uFF08\u6CE8\uFF1A\u4E0D\u662F\u521B\u5EFA\u65B0\u6570\u7EC4\uFF09\u3002</p><p><strong><em>\u5F15\u5165\u7248\u672C</em></strong> 3.2.0</p><p><strong><em>\u53C2\u6570</em></strong> array (Array): \u8981\u586B\u5145\u6539\u53D8\u7684\u6570\u7EC4\u3002 value (*): \u586B\u5145\u7ED9 array \u7684\u503C\u3002 [start=0] (number): \u5F00\u59CB\u4F4D\u7F6E\uFF08\u9ED8\u8BA4 0\uFF09\u3002 [end=array.length] (number):\u7ED3\u675F\u4F4D\u7F6E\uFF08\u9ED8\u8BA4 array.length\uFF09\u3002 <strong><em>\u8FD4\u56DE\u503C</em></strong> (Array): \u8FD4\u56DE array\u3002</p><p><strong><em>\u4F8B\u5B50</em></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n_<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; [&#39;a&#39;, &#39;a&#39;, &#39;a&#39;]</span>\n\n_<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; [2, 2, 2]</span>\n\n_<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; [4, &#39;*&#39;, &#39;*&#39;, 10]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>\u6E90\u7801\u5B9E\u73B0</em></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> value<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> length <span class="token operator">=</span> array <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    start <span class="token operator">&amp;&amp;</span>\n    <span class="token keyword">typeof</span> start <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token function">isIterateeCall</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> value<span class="token punctuation">,</span> start<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    end <span class="token operator">=</span> length<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token function">baseFill</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> value<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> fill<span class="token punctuation">;</span>\n\n<span class="token comment">//baseFill</span>\n<span class="token keyword">function</span> <span class="token function">baseFill</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> value<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n\n  start <span class="token operator">=</span> <span class="token function">toInteger</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    start <span class="token operator">=</span> <span class="token operator">-</span>start <span class="token operator">&gt;</span> length <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> length <span class="token operator">+</span> start<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  end <span class="token operator">=</span> end <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> end <span class="token operator">&gt;</span> length <span class="token operator">?</span> length <span class="token operator">:</span> <span class="token function">toInteger</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    end <span class="token operator">+=</span> length<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  end <span class="token operator">=</span> start <span class="token operator">&gt;</span> end <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">toLength</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    array<span class="token punctuation">[</span>start<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> array<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> baseFill<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>\u7B80\u5355\u6A21\u62DF\u5B9E\u73B0</em></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> value<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// \u5904\u7406start,end,\u8FD9\u91CC\u5904\u7406\u8FB9\u754C\u503C\u770B\u6284\u6E90\u7801\uFF0C\u6CA1\u6709\u8003\u8651\u8F93\u5165\u975E\u6570\u5B57\u95EE\u9898,\u91CD\u70B9\u662F\u8FB9\u754C\u786E\u5B9A</span>\n  <span class="token keyword">let</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    start <span class="token operator">=</span> <span class="token operator">-</span>start <span class="token operator">&gt;</span> len <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> len <span class="token operator">+</span> start<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  end <span class="token operator">=</span> end <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> end <span class="token operator">&gt;</span> len <span class="token operator">?</span> len <span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    end <span class="token operator">+=</span> len<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  end <span class="token operator">=</span> start <span class="token operator">&gt;</span> end <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> end<span class="token punctuation">;</span>\n  <span class="token comment">//\u5FAA\u73AF\u66FF\u6362,\u8FB9\u754C\u5DE6\u95ED\u53F3\u5F00</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    array<span class="token punctuation">[</span>start<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> array<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ 1, 6, 6, 4, 5 ]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 11);
const _hoisted_12 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_12);
}
var fill_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "fill.html.vue"]]);
export { fill_html as default };
