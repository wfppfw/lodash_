import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode } from "./app.eda87d9d.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>_.eq(value, other)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u6267\u884C SameValueZero \u6BD4\u8F83\u4E24\u8005\u7684\u503C\uFF0C\u6765\u786E\u5B9A\u5B83\u4EEC\u662F\u5426\u76F8\u7B49\u3002</p><p><strong><em>\u6DFB\u52A0\u7248\u672C</em></strong> 4.0.0</p><p><strong><em>\u53C2\u6570</em></strong> value (<em>): \u8981\u6BD4\u8F83\u7684\u503C\u3002 other (</em>): \u53E6\u4E00\u4E2A\u8981\u6BD4\u8F83\u7684\u503C\u3002</p><p><strong><em>\u8FD4\u56DE</em></strong> (boolean): \u5982\u679C\u4E24\u4E2A\u503C\u76F8\u7B49\u8FD4\u56DE true \uFF0C\u5426\u5219\u8FD4\u56DE false \u3002</p><p><strong><em>\u4F8B\u5B50</em></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> other <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n_<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; true</span>\n\n_<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; false</span>\n\n_<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; true</span>\n\n_<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; false</span>\n\n_<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>\u6E90\u7801\u5B9E\u73B0</em></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">eq</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> other</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">===</span> other <span class="token operator">||</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> value <span class="token operator">&amp;&amp;</span> other <span class="token operator">!==</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> eq<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>value === other</code> \u5224\u65AD\u9664\u4E86 NaN \u7684\u60C5\u51B5\uFF0C<code>(value !== value &amp;&amp; other !== other)</code>\u5224\u65AD\u4E24\u4E2A\u662F\u5426\u90FD\u662F NaN</p><p><strong><em>\u7B80\u5355\u6A21\u62DF\u5B9E\u73B0</em></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">eq</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> other</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> other<span class="token punctuation">)</span> <span class="token operator">||</span> value <span class="token operator">===</span> other<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object.is()\u91C7\u7528\u7684\u662F SameValue\uFF0C\u4E0E SameValueZero \u4E0D\u540C\u7684\u662F 0 \u548C-0 \u4E0D\u76F8\u7B49\uFF0C\u800C\u5728 SameValueZero \u91CC 0 \u548C-0 \u548C+0 \u90FD\u662F\u76F8\u7B49\u7684\uFF0C\u5F53\u51FA\u73B0\u7279\u4F8B\u65F6\u5230\u7B2C\u4E8C\u4E2A\u6761\u4EF6\u5224\u65AD 0===-0; \u6CA1\u6709\u6D4B\u8BD5\u592A\u591A\uFF0C\u5E94\u8BE5\u6CA1\u95EE\u9898\u5427\u54C8\u54C8\u54C8\u3002</p>', 13);
const _hoisted_14 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_14);
}
var eq_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "eq.html.vue"]]);
export { eq_html as default };
